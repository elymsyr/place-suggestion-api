#Problem

I have created an Artifact Registry and pushed my container into it and deploy the build  to Run with docker pull, docker tag, docker push and gcloud run... Container runs both locally and on Cloud Run with no error.
But on Gcloud, everytime, I get a results which means It can not found any of the selectors. But I do not get any driver error or else. I have tried two different Dockerfiles and both runs on local with no error.

***Dockerfiles, scraping and api code and the results on Google Cloud Run with the log can be found at the below:***

[**Dockerfile 1: Dockerfile & Dockerfile 2: Dockerfile.test**](https://github.com/elymsyr/place-suggestion-api/blob/main/API/app)

# API

There is two API get calls. One is only returns a json and works fine both on local and Gcloud Run. The other one gets url and scraps the tab. Scraping is proccessed asynchronously.

## Functions

***See all the functions [in this file...](https://github.com/elymsyr/place-suggestion-api/blob/main/API/app/main.py).***

### APIs

There is two get functions: scrape_task *(/scrap)* and read_root *(/)*. Read root function works fine on both local on Google Cloud Run.

### Scraping

*Scrap* function is the main function that is called by get.

*Fetchdata* is called asynchronously, as the response is received in the *scrap* function.

*Search google maps* function calls the *scrap data* function twice because sometimes the result can be a list and calls the first element at the second try.

*Scrap data* function creates a driver and scrapes data by loading the page:

```
def scrap_data(url, query, start, wait_time, driver, creation_time):
    xpaths = {
        'place_name': "//div[contains(@class, 'tTVLSc')]//h1",
        'place_name_2': "//div[contains(@class, 'lMbq3e')]//h1",
        'image_elements': "//div[contains(@class, 'tTVLSc')]//img",
        'place_type': "//div[contains(@class, 'skqShb')]//button[contains(@class, 'DkEaL')]",
        'place_type_back': "//div[contains(@class, 'skqShb')]",
        'price_elements': "//span[contains(@aria-label, 'Price')]",
        'if_result_url': "//div/a[contains(@class, 'hfpxzc')]",
        'patrial_matches': "//div[contains(@class, 'Bt0TOd')]"
    }    
    data = {'status': 1}
    timers = f"\n{query}\nDriver Created : {perf_counter() - start} ({creation_time:.2f})"
    try:
        WebDriverWait(driver, wait_time).until(EC.presence_of_element_located((By.XPATH, xpaths['place_name'])))
        place_name_elements = driver.find_elements(By.XPATH, xpaths['place_name'])
        place_name = place_name_elements[0].text if place_name_elements else None    
        data['place_name'] = place_name
    except: data['status'] = 0

    timers += f"\nTimer - place_name : {perf_counter() - start}"

    try:
        WebDriverWait(driver, wait_time).until(EC.presence_of_element_located((By.XPATH, xpaths['image_elements'])))
        prefixes = ("https://lh5.googleusercontent.com/p/", "https://streetviewpixels-pa.googleapis.com")
        image_elements = driver.find_elements(By.XPATH, xpaths['image_elements'])
        image = [image.get_attribute('src') for image in image_elements if image.get_attribute('src').startswith(prefixes)] if image_elements else None
        data['image'] = image
    except: data['status'] = 0
    timers += f"\nTimer - image_elements : {perf_counter() - start}"

    patrial_matches_elements = driver.find_elements(By.XPATH, xpaths['patrial_matches'])
    if patrial_matches_elements:
        patrial_matches = [element.text for element in patrial_matches_elements][0]
        if patrial_matches and 'partial match'.strip() in patrial_matches.lower().strip(): return f"Partial matches found : {query}"

    place_type_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'skqShb')]//button[contains(@class, 'DkEaL')]")
    place_type = place_type_elements[0].text if place_type_elements else None
    data['place_type'] = place_type

    if place_type is None or place_type == '':
        place_type_elements = driver.find_elements(By.XPATH, "//div[contains(@class, 'skqShb')]")
        place_type = place_type_elements[0].text if place_type_elements else None

    price_elements = driver.find_elements(By.XPATH, "//span[contains(@aria-label, 'Price')]")
    price = price_elements[0].text if price_elements else None
    data['price'] = price

    timers += f"\nTimer - other elements : {perf_counter() - start}"

    try:
        WebDriverWait(driver, wait_time).until(lambda driver: driver.current_url.startswith('https://www.google.com/maps/place'))
        data['url'] = driver.current_url
        data['coordinate'] = extract_coordinates(data['url'])
        print(f"Url loaded successfully : {perf_counter() - start} ", query, url)
    except:
        data['status'] = 0

    timers += f"\nTimer - Scraped : {perf_counter() - start}"
    timers += f"\n{data['status']=}\n"
    print(timers)
    
    if data['status'] == 0:
        
        data['response'] = query
        if 'url' not in data.keys(): data['url'] = url
        
        try:
            a_element = WebDriverWait(driver, wait_time).until(
                EC.presence_of_element_located((By.XPATH, "//div/a[contains(@class, 'hfpxzc')]"))
            )
            return data, a_element.get_attribute("href")
        except: pass

    return data, []

```

# Results on Google Cloud Run

See Googlce Cloud Run logs and output can be found (outputs.txt & logs.txt) [***here at github***](https://github.com/elymsyr/place-suggestion-api/blob/main/stackoverflow).